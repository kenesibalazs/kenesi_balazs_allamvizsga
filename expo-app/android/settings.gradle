pluginManagement {
  def gradlePluginDir = ["node", "--print", "require.resolve('@react-native/gradle-plugin/package.json', { paths: [require.resolve('react-native/package.json')] })"]
          .execute(null, rootDir)
          .text
          .trim()

  includeBuild(new File(gradlePluginDir).getParentFile())
}

plugins { id("com.facebook.react.settings") }

extensions.configure(com.facebook.react.ReactSettingsExtension) { ex ->
  if (System.getenv('EXPO_USE_COMMUNITY_AUTOLINKING') == '1') {
    ex.autolinkLibrariesFromCommand()
  } else {
    def command = [
            'node',
            '--no-warnings',
            '--eval',
            'require(require.resolve(\'expo-modules-autolinking\', { paths: [require.resolve(\'expo/package.json\')] }))(process.argv.slice(1))',
            'react-native-config',
            '--json',
            '--platform',
            'android'
    ].toList()
    ex.autolinkLibrariesFromCommand(command)
  }
}

rootProject.name = 'expo-app'

dependencyResolutionManagement {
  versionCatalogs {
    reactAndroidLibs {
      def reactNativePackage = ["node", "--print", "require.resolve('react-native/package.json')"]
              .execute(null, rootDir)
              .text
              .trim()

      from(files(new File(reactNativePackage, "../gradle/libs.versions.toml")))
    }
  }
}

def expoPackage = ["node", "--print", "require.resolve('expo/package.json')"]
        .execute(null, rootDir)
        .text
        .trim()

apply from: new File(expoPackage, "../scripts/autolinking.gradle")
useExpoModules()

include(":app")

def reactNativeGradlePlugin = ["node", "--print", "require.resolve('@react-native/gradle-plugin/package.json', { paths: [require.resolve('react-native/package.json')] })"]
        .execute(null, rootDir)
        .text
        .trim()

includeBuild(new File(reactNativeGradlePlugin).getParentFile())